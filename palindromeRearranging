/*
Given a string, find out if its characters can be rearranged to form a palindrome.

Example

For inputString = "aabb", the output should be
palindromeRearranging(inputString) = true.

We can rearrange "aabb" to make "abba", which is a palindrome.

Input/Output

[execution time limit] 3 seconds (java)

[input] string inputString

A string consisting of lowercase English letters.

Guaranteed constraints:
1 ≤ inputString.length ≤ 50.

[output] boolean

true if the characters of the inputString can be rearranged to form a palindrome, false otherwise.

*/

Solution --
boolean palindromeRearranging(String inputString) {
    HashMap <Character, Integer> map = new HashMap();
    for(int i =0 ; i < inputString.length(); i++){
        char temp = inputString.charAt(i);
        if(map.containsKey(temp)){
            map.put(temp, map.get(temp)+1);
        }
        else{
            map.put(temp,1);
        }
    }
    if(map.size() == 1){
        return true;
    }
    int value =0;
    int even = 0;
    for(Character c : map.keySet()){
        if(map.get(c)%2 == 0){
            even++;
        }
        else if(map.get(c)%2 == 1){
            value++;
        }
        else{
            System.out.println("test0");
            // return false;
        }
    }
    if(even ==  map.size()){
        System.out.println("test1");
        return true;
    }
    
    if(value ==1){
        System.out.println("test2");
        return true;
    }
    // if(value == 3){
    //     if(map.size() == inputString.length()){
    //         return true;
    //     }
    // }
    if(value >1){
        System.out.println(value);
        System.out.println("test3");
        return false;
    }
     System.out.println("test4");
    return false;
}
